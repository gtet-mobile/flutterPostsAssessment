// Mocks generated by Mockito 5.4.4 from annotations
// in posts/test/TDD_test/unit_test/create_post/presentation_layer/create_post_bloc_test_cases/create_post_bloc_unit_test_cases.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:posts/features/create_post/domain_layer/repositories/create_post_repository/create_post_repository.dart'
    as _i2;
import 'package:posts/features/create_post/domain_layer/use_cases/create_post_use_case.dart'
    as _i4;
import 'package:posts/features/posts_lists/domain_layer/models/post_model.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAbstractCreatePostRepository_0 extends _i1.SmartFake
    implements _i2.AbstractCreatePostRepository {
  _FakeAbstractCreatePostRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostModel_1 extends _i1.SmartFake implements _i3.PostModel {
  _FakePostModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CreatePostUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreatePostUseCase extends _i1.Mock implements _i4.CreatePostUseCase {
  MockCreatePostUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AbstractCreatePostRepository get createPostRepository =>
      (super.noSuchMethod(
        Invocation.getter(#createPostRepository),
        returnValue: _FakeAbstractCreatePostRepository_0(
          this,
          Invocation.getter(#createPostRepository),
        ),
      ) as _i2.AbstractCreatePostRepository);

  @override
  _i5.Future<_i3.PostModel> call({
    dynamic title,
    dynamic subtitle,
    dynamic userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #title: title,
            #subtitle: subtitle,
            #userId: userId,
          },
        ),
        returnValue: _i5.Future<_i3.PostModel>.value(_FakePostModel_1(
          this,
          Invocation.method(
            #call,
            [],
            {
              #title: title,
              #subtitle: subtitle,
              #userId: userId,
            },
          ),
        )),
      ) as _i5.Future<_i3.PostModel>);
}
